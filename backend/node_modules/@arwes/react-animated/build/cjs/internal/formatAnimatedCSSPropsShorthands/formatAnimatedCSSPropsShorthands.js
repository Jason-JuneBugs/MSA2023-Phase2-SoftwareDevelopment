"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatAnimatedCSSPropsShorthands = void 0;
const propsTransformDistances = {
    x: 'translateX',
    y: 'translateY',
    z: 'translateZ'
};
const propsTransformAngles = {
    rotate: 'rotate',
    rotateX: 'rotateX',
    rotateY: 'rotateY',
    rotateZ: 'rotateZ',
    skew: 'skew',
    skewX: 'skewX',
    skewY: 'skewY'
};
const propsTransformUnitless = {
    scale: 'scale',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleZ: 'scaleZ'
};
const formatAnimatedCSSPropsShorthands = (cssPropertiesEnhanced) => {
    if (!cssPropertiesEnhanced) {
        return;
    }
    const cssProperties = {};
    let transform = '';
    Object.keys(cssPropertiesEnhanced).forEach(key => {
        const raw = cssPropertiesEnhanced[key];
        if (propsTransformDistances[key]) {
            const name = propsTransformDistances[key];
            const value = Number.isFinite(raw) ? `${raw}px` : String(raw);
            transform += ` ${name}(${value})`;
        }
        else if (propsTransformAngles[key]) {
            const name = propsTransformAngles[key];
            const value = Number.isFinite(raw) ? `${raw}deg` : String(raw);
            transform += ` ${name}(${value})`;
        }
        else if (propsTransformUnitless[key]) {
            const name = propsTransformUnitless[key];
            transform += ` ${name}(${raw})`;
        }
        else {
            cssProperties[key] = raw;
        }
    });
    transform = transform.trim();
    if (transform) {
        cssProperties.transform = transform;
    }
    return cssProperties;
};
exports.formatAnimatedCSSPropsShorthands = formatAnimatedCSSPropsShorthands;
