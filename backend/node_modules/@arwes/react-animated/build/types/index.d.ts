declare module '@arwes/react-animated/Animated/Animated' {
  import { type HTMLProps, type SVGProps, type CSSProperties, type ReactElement, type ForwardedRef, type ReactNode } from 'react';
  import { type NoInfer } from '@arwes/tools';
  import type { AnimatedProp } from '@arwes/react-animated/types';
  interface AnimatedProps<E extends HTMLElement | SVGElement = HTMLDivElement> {
      elementRef?: ForwardedRef<E>;
      className?: string;
      style?: CSSProperties;
      animated?: AnimatedProp;
      hideOnExited?: boolean;
      hideOnEntered?: boolean;
      as?: keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap;
      children?: ReactNode;
  }
  const Animated: <E extends HTMLElement | SVGElement = HTMLDivElement, P extends HTMLProps<HTMLElement> | SVGProps<SVGElement> = HTMLProps<HTMLDivElement>>(props: AnimatedProps<E> & NoInfer<P>) => ReactElement;
  export type { AnimatedProps };
  export { Animated };

}
declare module '@arwes/react-animated/Animated/index' {
  import { Animated as Component } from '@arwes/react-animated/Animated/Animated';
  const Animated: typeof Component;
  export * from '@arwes/react-animated/Animated/Animated';
  export { Animated };

}
declare module '@arwes/react-animated/AnimatedX/AnimatedX' {
  import { type HTMLProps, type SVGProps, type CSSProperties, type ReactElement, type ForwardedRef, type ReactNode } from 'react';
  import { type NoInfer } from '@arwes/tools';
  import type { AnimatedProp } from '@arwes/react-animated/types';
  interface AnimatedXProps<E extends HTMLElement | SVGElement = HTMLDivElement> {
      elementRef?: ForwardedRef<E>;
      className?: string;
      style?: CSSProperties;
      state?: string;
      animated?: AnimatedProp;
      as?: keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap;
      children?: ReactNode;
  }
  const AnimatedX: <E extends HTMLElement | SVGElement = HTMLDivElement, P extends HTMLProps<HTMLElement> | SVGProps<SVGElement> = HTMLProps<HTMLDivElement>>(props: AnimatedXProps<E> & NoInfer<P>) => ReactElement;
  export type { AnimatedXProps };
  export { AnimatedX };

}
declare module '@arwes/react-animated/AnimatedX/index' {
  import { AnimatedX as Component } from '@arwes/react-animated/AnimatedX/AnimatedX';
  const AnimatedX: typeof Component;
  export * from '@arwes/react-animated/AnimatedX/AnimatedX';
  export { AnimatedX };

}
declare module '@arwes/react-animated/animations/animations' {
  import type { AnimatedSettings } from '@arwes/react-animated/types';
  const aa: (prop: string, from: number | string, to: number | string, back?: number | string) => AnimatedSettings;
  const aaOpacity: () => AnimatedSettings;
  const aaVisibility: () => AnimatedSettings;
  export { aa, aaOpacity, aaVisibility };

}
declare module '@arwes/react-animated/animations/index' {
  export * from '@arwes/react-animated/animations/animations';

}
declare module '@arwes/react-animated/constants' {
  import type { AnimatedSettings } from '@arwes/react-animated/types';
  export const ANIMATED_ANIMATIONS_EMPTY: Record<string, AnimatedSettings>;

}
declare module '@arwes/react-animated/index' {
  export * from '@arwes/react-animated/types';
  export * from '@arwes/react-animated/constants';
  export * from '@arwes/react-animated/Animated/index';
  export * from '@arwes/react-animated/AnimatedX/index';
  export * from '@arwes/react-animated/useAnimatedAnimations/index';
  export * from '@arwes/react-animated/animations/index';

}
declare module '@arwes/react-animated/internal/formatAnimatedCSSPropsShorthands/formatAnimatedCSSPropsShorthands' {
  import type { CSSProperties } from 'react';
  import type { AnimatedCSSProps } from '@arwes/react-animated/types';
  const formatAnimatedCSSPropsShorthands: (cssPropertiesEnhanced?: AnimatedCSSProps) => CSSProperties | undefined;
  export { formatAnimatedCSSPropsShorthands };

}
declare module '@arwes/react-animated/internal/formatAnimatedCSSPropsShorthands/index' {
  export * from '@arwes/react-animated/internal/formatAnimatedCSSPropsShorthands/formatAnimatedCSSPropsShorthands';

}
declare module '@arwes/react-animated/types' {
  import type { CSSProperties, HTMLProps, SVGProps } from 'react';
  import type { MotionKeyframesDefinition, AnimationOptionsWithOverrides } from '@motionone/dom';
  import type { AnimatorState } from '@arwes/animator';
  export interface AnimatedCSSPropsShorthands {
      x?: number | string;
      y?: number | string;
      z?: number | string;
      rotate?: number | string;
      rotateX?: number | string;
      rotateY?: number | string;
      rotateZ?: number | string;
      skew?: number | string;
      skewX?: number | string;
      skewY?: number | string;
      scale?: number | string;
      scaleX?: number | string;
      scaleY?: number | string;
      scaleZ?: number | string;
  }
  export type AnimatedCSSProps = Omit<CSSProperties, keyof AnimatedCSSPropsShorthands> & AnimatedCSSPropsShorthands;
  export type AnimatedSettingsTransitionDefinition = MotionKeyframesDefinition & {
      duration?: number;
      delay?: AnimationOptionsWithOverrides['delay'];
      easing?: AnimationOptionsWithOverrides['easing'];
      options?: AnimationOptionsWithOverrides;
  };
  export interface AnimatedSettingsTransitionFunctionConfig {
      element: HTMLElement | SVGElement;
      duration: number;
  }
  export interface AnimatedSettingsTransitionFunctionReturn {
      stop: () => void;
  }
  export type AnimatedSettingsTransitionFunction = ((config: AnimatedSettingsTransitionFunctionConfig) => AnimatedSettingsTransitionFunctionReturn) | ((config: AnimatedSettingsTransitionFunctionConfig) => void);
  export type AnimatedSettingsTransitionTypes = AnimatedSettingsTransitionFunction | AnimatedSettingsTransitionDefinition;
  export type AnimatedSettingsTransition = AnimatedSettingsTransitionTypes | AnimatedSettingsTransitionTypes[];
  export interface AnimatedSettings {
      initialAttributes?: HTMLProps<HTMLDivElement> | SVGProps<SVGPathElement>;
      initialStyle?: AnimatedCSSProps;
      transitions?: {
          [P in AnimatorState]?: AnimatedSettingsTransition | undefined;
      } & {
          [P in string]?: AnimatedSettingsTransition | undefined;
      };
  }
  export type AnimatedProp = AnimatedSettings | Array<AnimatedSettings | undefined> | undefined;
  export type AnimatedAnimation = AnimatedSettings | AnimatedSettings[];
  export type AnimatedAnimations = {
      [P in AnimatorState]?: AnimatedAnimation;
  };
  export type AnimatedAnimationsCreatorFunction<P = undefined> = (props: P) => AnimatedAnimations;
  export type AnimatedAnimationsCreator<P = undefined> = undefined | false | AnimatedAnimations | AnimatedAnimationsCreatorFunction<P>;

}
declare module '@arwes/react-animated/useAnimatedAnimations/index' {
  export * from '@arwes/react-animated/useAnimatedAnimations/useAnimatedAnimations';

}
declare module '@arwes/react-animated/useAnimatedAnimations/useAnimatedAnimations' {
  import type { AnimatedAnimations, AnimatedAnimationsCreator, AnimatedAnimationsCreatorFunction } from '@arwes/react-animated/types';
  const useAnimatedAnimations: <P = undefined>(animationsList: [AnimatedAnimationsCreatorFunction<P>, AnimatedAnimationsCreator<P>], props: P, dependencies: unknown[]) => AnimatedAnimations;
  export { useAnimatedAnimations };

}

declare module '@arwes/react-animated' {
  import main = require('@arwes/react-animated/index');
  export = main;
}
