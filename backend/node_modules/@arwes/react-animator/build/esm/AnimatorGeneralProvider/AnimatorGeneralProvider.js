import { createElement, useRef, useMemo } from 'react';
import { AnimatorGeneralContext } from "../internal/AnimatorGeneralContext/index.js";
const AnimatorGeneralProvider = (props) => {
    const { children, ...animatorGeneralSettings } = props;
    const animatorGeneralSettingsRef = useRef(animatorGeneralSettings);
    animatorGeneralSettingsRef.current = animatorGeneralSettings;
    const animatorGeneralInterface = useMemo(() => {
        // TODO: Merge with existing parent general animator settings.
        const getSettings = () => animatorGeneralSettingsRef.current;
        return Object.freeze({ getSettings });
    }, []);
    // TODO: Shouldn't there be a dependencies check for updates?
    return createElement(AnimatorGeneralContext.Provider, { value: animatorGeneralInterface }, children);
};
export { AnimatorGeneralProvider };
