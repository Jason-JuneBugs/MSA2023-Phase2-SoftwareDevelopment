"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dots = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const motion_1 = require("motion");
const tools_1 = require("@arwes/tools");
const react_tools_1 = require("@arwes/react-tools");
const animator_1 = require("@arwes/animator");
const react_animator_1 = require("@arwes/react-animator");
const getDistanceFromOriginToCornerProgress_1 = require("./getDistanceFromOriginToCornerProgress");
const { entering, exiting } = animator_1.ANIMATOR_STATES;
const defaultProps = {
    color: '#777',
    type: 'box',
    distance: 30,
    size: 4,
    origin: 'center'
};
const Dots = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        let animationControl;
        let resizeObserver;
        const cancelAnimationSubscriptions = () => {
            animationControl === null || animationControl === void 0 ? void 0 : animationControl.cancel();
            resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
        };
        const animatorSubscription = (node) => {
            if (node.state !== entering && node.state !== exiting) {
                return;
            }
            cancelAnimationSubscriptions();
            const active = node.state === entering;
            const { duration } = node.control.getSettings();
            const transitionDuration = (active ? duration === null || duration === void 0 ? void 0 : duration.enter : duration === null || duration === void 0 ? void 0 : duration.exit) || 0;
            const canvas = elementRef.current;
            const ctx = canvas.getContext('2d');
            const draw = (progress) => {
                const { color, type, distance, size, origin, originInverted } = propsFullRef.current;
                const width = canvas.clientWidth;
                const height = canvas.clientHeight;
                const xLength = 1 + Math.floor(width / distance);
                const yLength = 1 + Math.floor(height / distance);
                const xMargin = width % distance;
                const yMargin = height % distance;
                // Only assign size if they changed.
                if (canvas.width !== width || canvas.height !== height) {
                    canvas.width = width;
                    canvas.height = height;
                }
                ctx.clearRect(0, 0, width, height);
                for (let xIndex = 0; xIndex < xLength; xIndex++) {
                    const x = (xMargin / 2) + (xIndex * distance);
                    for (let yIndex = 0; yIndex < yLength; yIndex++) {
                        const y = (yMargin / 2) + (yIndex * distance);
                        const distanceFromOriginProgress = (0, getDistanceFromOriginToCornerProgress_1.getDistanceFromOriginToCornerProgress)(width, height, x, y, origin);
                        const distancePercentage = (active && originInverted) || (!active && !originInverted)
                            ? 1 - distanceFromOriginProgress
                            : distanceFromOriginProgress;
                        const alphaProgress = progress / distancePercentage;
                        const alpha = Math.max(0, Math.min(1, alphaProgress));
                        ctx.beginPath();
                        ctx.globalAlpha = active ? alpha : 1 - alpha;
                        if (type === 'box') {
                            ctx.rect(x - (size / 2), y - (size / 2), size, size);
                        }
                        else {
                            ctx.arc(x, y, size, 0, 2 * Math.PI);
                        }
                        ctx.fillStyle = color;
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            };
            animationControl = (0, motion_1.animate)(draw, {
                duration: transitionDuration,
                easing: 'ease-in-out'
            });
            if (window.ResizeObserver) {
                resizeObserver = new window.ResizeObserver(() => {
                    const currentTime = (animationControl === null || animationControl === void 0 ? void 0 : animationControl.currentTime) || 0;
                    if (active && currentTime >= transitionDuration) {
                        draw(1);
                    }
                });
                resizeObserver.observe(canvas);
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            cancelAnimationSubscriptions();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-dots', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            ...style
        } }));
};
exports.Dots = Dots;
