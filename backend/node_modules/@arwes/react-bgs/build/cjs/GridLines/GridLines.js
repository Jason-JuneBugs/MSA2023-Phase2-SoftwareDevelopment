"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridLines = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const motion_1 = require("motion");
const tools_1 = require("@arwes/tools");
const react_tools_1 = require("@arwes/react-tools");
const animator_1 = require("@arwes/animator");
const react_animator_1 = require("@arwes/react-animator");
const { entering, exiting } = animator_1.ANIMATOR_STATES;
const defaultProps = {
    lineWidth: 1,
    lineColor: '#777',
    horizontalLineDash: [4],
    verticalLineDash: [],
    distance: 30
};
const GridLines = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        const canvas = elementRef.current;
        const ctx = canvas.getContext('2d');
        let transitionControl;
        let resizeObserver;
        const draw = () => {
            const { lineWidth, lineColor, horizontalLineDash, verticalLineDash, distance } = propsFullRef.current;
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;
            const xLength = 1 + Math.floor(width / distance);
            const yLength = 1 + Math.floor(height / distance);
            const xMargin = width % distance;
            const yMargin = height % distance;
            canvas.width = width;
            canvas.height = height;
            ctx.clearRect(0, 0, width, height);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = lineColor;
            // Horizontal lines.
            ctx.setLineDash(horizontalLineDash);
            for (let yIndex = 0; yIndex < yLength; yIndex++) {
                const y = (yMargin / 2) + (yIndex * distance);
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
                ctx.closePath();
            }
            // Vertical lines.
            ctx.setLineDash(verticalLineDash);
            for (let xIndex = 0; xIndex < xLength; xIndex++) {
                const x = (xMargin / 2) + (xIndex * distance);
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, height);
                ctx.stroke();
                ctx.closePath();
            }
        };
        const animatorSubscription = (node) => {
            const state = node.state;
            const { duration } = node.control.getSettings();
            switch (state) {
                case entering: {
                    draw();
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [0, 1] }, { duration: duration === null || duration === void 0 ? void 0 : duration.enter, easing: 'ease-out' });
                    break;
                }
                case exiting: {
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [1, 0] }, { duration: duration === null || duration === void 0 ? void 0 : duration.exit, easing: 'ease-out' });
                    break;
                }
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        if (window.ResizeObserver && !resizeObserver) {
            resizeObserver = new window.ResizeObserver(() => draw());
            resizeObserver.observe(canvas);
        }
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            transitionControl === null || transitionControl === void 0 ? void 0 : transitionControl.cancel();
            resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-gridlines', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            opacity: 0,
            ...style
        } }));
};
exports.GridLines = GridLines;
