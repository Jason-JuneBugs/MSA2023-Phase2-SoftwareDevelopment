declare module '@arwes/react-bgs/Dots/Dots' {
  import { type ReactElement } from 'react';
  import { type DotsProps } from '@arwes/react-bgs/Dots/Dots.types';
  const Dots: (props: DotsProps) => ReactElement;
  export { Dots };

}
declare module '@arwes/react-bgs/Dots/Dots.types' {
  import type { CSSProperties, ForwardedRef } from 'react';
  export type DotsPropsOrigin = 'left' | 'right' | 'top' | 'bottom' | 'center' | [number, number];
  export interface DotsProps {
      elementRef?: ForwardedRef<HTMLCanvasElement>;
      className?: string;
      style?: CSSProperties;
      /**
       * Dot color.
       */
      color?: string;
      /**
       * Shape of the dot.
       */
      type?: 'box' | 'circle';
      /**
       * Distance between each dot center in pixels.
       */
      distance?: number;
      /**
       * Dot size in pixels.
       */
      size?: number;
      /**
       * Rectangle container axis or point [x, y] as percentages of the rectangle
       * dimensions from 0 (0%) to 1 (100%).
       * @example
       * [0.2, 0.8] is x=20% and y=80% as origin.
       */
      origin?: DotsPropsOrigin;
      /**
       * Invert the animation to work "to origin" point instead "from origin" point.
       */
      originInverted?: boolean;
  }

}
declare module '@arwes/react-bgs/Dots/getDistanceFromOriginToCornerProgress' {
  import { type DotsPropsOrigin } from '@arwes/react-bgs/Dots/Dots.types';
  const getDistanceFromOriginToCornerProgress: (width: number, height: number, x1: number, y1: number, origin: DotsPropsOrigin) => number;
  export { getDistanceFromOriginToCornerProgress };

}
declare module '@arwes/react-bgs/Dots/index' {
  /// <reference types="react" />
  const Dots: (props: import("@arwes/react-bgs/Dots/Dots.types").DotsProps) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
  export * from '@arwes/react-bgs/Dots/Dots.types';
  export { Dots };

}
declare module '@arwes/react-bgs/GridLines/GridLines' {
  import { type ReactElement } from 'react';
  import { type GridLinesProps } from '@arwes/react-bgs/GridLines/GridLines.types';
  const GridLines: (props: GridLinesProps) => ReactElement;
  export { GridLines };

}
declare module '@arwes/react-bgs/GridLines/GridLines.types' {
  import type { CSSProperties, ForwardedRef } from 'react';
  export interface GridLinesProps {
      elementRef?: ForwardedRef<HTMLCanvasElement>;
      className?: string;
      style?: CSSProperties;
      lineWidth?: number;
      lineColor?: string;
      horizontalLineDash?: number[];
      verticalLineDash?: number[];
      /**
       * Distance between each line.
       */
      distance?: number;
  }

}
declare module '@arwes/react-bgs/GridLines/index' {
  /// <reference types="react" />
  const GridLines: (props: import("@arwes/react-bgs/GridLines/GridLines.types").GridLinesProps) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
  export * from '@arwes/react-bgs/GridLines/GridLines.types';
  export { GridLines };

}
declare module '@arwes/react-bgs/MovingLines/MovingLines' {
  import { type ReactElement } from 'react';
  import { type MovingLinesProps } from '@arwes/react-bgs/MovingLines/MovingLines.types';
  const MovingLines: (props: MovingLinesProps) => ReactElement;
  export { MovingLines };

}
declare module '@arwes/react-bgs/MovingLines/MovingLines.types' {
  import type { CSSProperties, ForwardedRef } from 'react';
  export interface MovingLinesProps {
      elementRef?: ForwardedRef<HTMLCanvasElement>;
      className?: string;
      style?: CSSProperties;
      lineWidth?: number;
      lineColor?: string;
      /**
       * Distance between each line.
       */
      distance?: number;
      /**
       * Sets of lines per interval animation.
       */
      sets?: number;
  }
  export interface MovingLinesLineConfig {
      distance: number;
      positionsLength: number;
      margin: number;
      size: number;
  }
  export interface MovingLinesLine {
      axis1: number;
      axis2Initial: number;
      length: number;
  }

}
declare module '@arwes/react-bgs/MovingLines/index' {
  /// <reference types="react" />
  const MovingLines: (props: import("@arwes/react-bgs/MovingLines/MovingLines.types").MovingLinesProps) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
  export * from '@arwes/react-bgs/MovingLines/MovingLines.types';
  export { MovingLines };

}
declare module '@arwes/react-bgs/Puffs/Puffs' {
  import { type ReactElement } from 'react';
  import { type PuffsProps } from '@arwes/react-bgs/Puffs/Puffs.types';
  const Puffs: (props: PuffsProps) => ReactElement;
  export { Puffs };

}
declare module '@arwes/react-bgs/Puffs/Puffs.types' {
  import { type CSSProperties, type ForwardedRef } from 'react';
  export interface PuffsProps {
      elementRef?: ForwardedRef<HTMLCanvasElement>;
      className?: string;
      style?: CSSProperties;
      /**
       * Puff color.
       */
      color: string;
      /**
       * Number of puffs to create.
       */
      quantity: number;
      /**
       * Extra padding space in pixels of the canvas so the puffs have space to
       * move when animating.
       */
      padding?: number;
      /**
       * Position X offset to animate in pixels. A static value and a dynamic value.
       * @example
       * [10, 50] means it will at least move 10 pixels to the right and plus
       * a random value between 0 and 50 more.
       */
      xOffset?: [number, number];
      /**
       * Position Y offset to animate in pixels. A static value and a dynamic value.
       * @example
       * [10, 50] means it will at least move 10 pixels to the bottom and plus
       * a random value between 0 and 50 more.
       */
      yOffset?: [number, number];
      /**
       * Radius initial value in pixels.
       */
      radiusInitial?: number;
      /**
       * Puff radius offset fixed and variation values in pixels.
       * @example
       * [4, 8] means the puff radius offset will be at least 4 pixels plus a random
       * value between 0 and 8 more.
       */
      radiusOffset?: [number, number];
      /**
       * Sets of puffs per interval animation.
       */
      sets?: number;
  }

}
declare module '@arwes/react-bgs/Puffs/index' {
  /// <reference types="react" />
  const Puffs: (props: import("@arwes/react-bgs/Puffs/Puffs.types").PuffsProps) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
  export * from '@arwes/react-bgs/Puffs/Puffs.types';
  export { Puffs };

}
declare module '@arwes/react-bgs/index' {
  export * from '@arwes/react-bgs/Dots/index';
  export * from '@arwes/react-bgs/Puffs/index';
  export * from '@arwes/react-bgs/GridLines/index';
  export * from '@arwes/react-bgs/MovingLines/index';

}

declare module '@arwes/react-bgs' {
  import main = require('@arwes/react-bgs/index');
  export = main;
}
