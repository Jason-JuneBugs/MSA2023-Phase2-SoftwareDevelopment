(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["arwes"] = factory();
	else
		root["arwes"] = root["arwes"] || {}, root["arwes"]["umd"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Dots/Dots.tsx":
/*!***************************!*\
  !*** ./src/Dots/Dots.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dots = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_1 = tslib_1.__importStar(__webpack_require__(/*! react */ "../../scripts/pkg-build-umd-mocks/react.js"));
const motion_1 = __webpack_require__(/*! motion */ "../../scripts/pkg-build-umd-mocks/motion.js");
const tools_1 = __webpack_require__(/*! @arwes/tools */ "../../scripts/pkg-build-umd-mocks/arwes/tools.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const animator_1 = __webpack_require__(/*! @arwes/animator */ "../../scripts/pkg-build-umd-mocks/arwes/animator.js");
const react_animator_1 = __webpack_require__(/*! @arwes/react-animator */ "../../scripts/pkg-build-umd-mocks/arwes/react-animator.js");
const getDistanceFromOriginToCornerProgress_1 = __webpack_require__(/*! ./getDistanceFromOriginToCornerProgress */ "./src/Dots/getDistanceFromOriginToCornerProgress.ts");
const { entering, exiting } = animator_1.ANIMATOR_STATES;
const defaultProps = {
    color: '#777',
    type: 'box',
    distance: 30,
    size: 4,
    origin: 'center'
};
const Dots = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        let animationControl;
        let resizeObserver;
        const cancelAnimationSubscriptions = () => {
            animationControl === null || animationControl === void 0 ? void 0 : animationControl.cancel();
            resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
        };
        const animatorSubscription = (node) => {
            if (node.state !== entering && node.state !== exiting) {
                return;
            }
            cancelAnimationSubscriptions();
            const active = node.state === entering;
            const { duration } = node.control.getSettings();
            const transitionDuration = (active ? duration === null || duration === void 0 ? void 0 : duration.enter : duration === null || duration === void 0 ? void 0 : duration.exit) || 0;
            const canvas = elementRef.current;
            const ctx = canvas.getContext('2d');
            const draw = (progress) => {
                const { color, type, distance, size, origin, originInverted } = propsFullRef.current;
                const width = canvas.clientWidth;
                const height = canvas.clientHeight;
                const xLength = 1 + Math.floor(width / distance);
                const yLength = 1 + Math.floor(height / distance);
                const xMargin = width % distance;
                const yMargin = height % distance;
                // Only assign size if they changed.
                if (canvas.width !== width || canvas.height !== height) {
                    canvas.width = width;
                    canvas.height = height;
                }
                ctx.clearRect(0, 0, width, height);
                for (let xIndex = 0; xIndex < xLength; xIndex++) {
                    const x = (xMargin / 2) + (xIndex * distance);
                    for (let yIndex = 0; yIndex < yLength; yIndex++) {
                        const y = (yMargin / 2) + (yIndex * distance);
                        const distanceFromOriginProgress = (0, getDistanceFromOriginToCornerProgress_1.getDistanceFromOriginToCornerProgress)(width, height, x, y, origin);
                        const distancePercentage = (active && originInverted) || (!active && !originInverted)
                            ? 1 - distanceFromOriginProgress
                            : distanceFromOriginProgress;
                        const alphaProgress = progress / distancePercentage;
                        const alpha = Math.max(0, Math.min(1, alphaProgress));
                        ctx.beginPath();
                        ctx.globalAlpha = active ? alpha : 1 - alpha;
                        if (type === 'box') {
                            ctx.rect(x - (size / 2), y - (size / 2), size, size);
                        }
                        else {
                            ctx.arc(x, y, size, 0, 2 * Math.PI);
                        }
                        ctx.fillStyle = color;
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            };
            animationControl = (0, motion_1.animate)(draw, {
                duration: transitionDuration,
                easing: 'ease-in-out'
            });
            if (window.ResizeObserver) {
                resizeObserver = new window.ResizeObserver(() => {
                    const currentTime = (animationControl === null || animationControl === void 0 ? void 0 : animationControl.currentTime) || 0;
                    if (active && currentTime >= transitionDuration) {
                        draw(1);
                    }
                });
                resizeObserver.observe(canvas);
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            cancelAnimationSubscriptions();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-dots', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            ...style
        } }));
};
exports.Dots = Dots;


/***/ }),

/***/ "./src/Dots/Dots.types.ts":
/*!********************************!*\
  !*** ./src/Dots/Dots.types.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
;


/***/ }),

/***/ "./src/Dots/getDistanceFromOriginToCornerProgress.ts":
/*!***********************************************************!*\
  !*** ./src/Dots/getDistanceFromOriginToCornerProgress.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDistanceFromOriginToCornerProgress = void 0;
const getDistanceBetweenTwoPoints = (x1, y1, x2, y2) => {
    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
};
const getDistanceFromOriginToCornerProgress = (width, height, x1, y1, origin) => {
    switch (origin) {
        case 'left': return x1 / width;
        case 'right': return 1 - x1 / width;
        case 'top': return y1 / height;
        case 'bottom': return 1 - y1 / height;
        case 'center':
            origin = [0.5, 0.5];
            break;
    }
    const [x2Percentage, y2Percentage] = origin;
    const x2 = width * x2Percentage;
    const y2 = height * y2Percentage;
    const distanceFromOrigin = getDistanceBetweenTwoPoints(x1, y1, x2, y2);
    const x3 = x2 < width / 2 ? width : 0;
    const y3 = y2 < height / 2 ? height : 0;
    const maxDistanceToCorner = getDistanceBetweenTwoPoints(x2, y2, x3, y3);
    return distanceFromOrigin / maxDistanceToCorner;
};
exports.getDistanceFromOriginToCornerProgress = getDistanceFromOriginToCornerProgress;


/***/ }),

/***/ "./src/Dots/index.ts":
/*!***************************!*\
  !*** ./src/Dots/index.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dots = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const Dots_1 = __webpack_require__(/*! ./Dots */ "./src/Dots/Dots.tsx");
const Dots = (0, react_tools_1.memo)(Dots_1.Dots);
exports.Dots = Dots;
tslib_1.__exportStar(__webpack_require__(/*! ./Dots.types */ "./src/Dots/Dots.types.ts"), exports);


/***/ }),

/***/ "./src/GridLines/GridLines.tsx":
/*!*************************************!*\
  !*** ./src/GridLines/GridLines.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridLines = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_1 = tslib_1.__importStar(__webpack_require__(/*! react */ "../../scripts/pkg-build-umd-mocks/react.js"));
const motion_1 = __webpack_require__(/*! motion */ "../../scripts/pkg-build-umd-mocks/motion.js");
const tools_1 = __webpack_require__(/*! @arwes/tools */ "../../scripts/pkg-build-umd-mocks/arwes/tools.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const animator_1 = __webpack_require__(/*! @arwes/animator */ "../../scripts/pkg-build-umd-mocks/arwes/animator.js");
const react_animator_1 = __webpack_require__(/*! @arwes/react-animator */ "../../scripts/pkg-build-umd-mocks/arwes/react-animator.js");
const { entering, exiting } = animator_1.ANIMATOR_STATES;
const defaultProps = {
    lineWidth: 1,
    lineColor: '#777',
    horizontalLineDash: [4],
    verticalLineDash: [],
    distance: 30
};
const GridLines = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        const canvas = elementRef.current;
        const ctx = canvas.getContext('2d');
        let transitionControl;
        let resizeObserver;
        const draw = () => {
            const { lineWidth, lineColor, horizontalLineDash, verticalLineDash, distance } = propsFullRef.current;
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;
            const xLength = 1 + Math.floor(width / distance);
            const yLength = 1 + Math.floor(height / distance);
            const xMargin = width % distance;
            const yMargin = height % distance;
            canvas.width = width;
            canvas.height = height;
            ctx.clearRect(0, 0, width, height);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = lineColor;
            // Horizontal lines.
            ctx.setLineDash(horizontalLineDash);
            for (let yIndex = 0; yIndex < yLength; yIndex++) {
                const y = (yMargin / 2) + (yIndex * distance);
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
                ctx.closePath();
            }
            // Vertical lines.
            ctx.setLineDash(verticalLineDash);
            for (let xIndex = 0; xIndex < xLength; xIndex++) {
                const x = (xMargin / 2) + (xIndex * distance);
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, height);
                ctx.stroke();
                ctx.closePath();
            }
        };
        const animatorSubscription = (node) => {
            const state = node.state;
            const { duration } = node.control.getSettings();
            switch (state) {
                case entering: {
                    draw();
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [0, 1] }, { duration: duration === null || duration === void 0 ? void 0 : duration.enter, easing: 'ease-out' });
                    break;
                }
                case exiting: {
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [1, 0] }, { duration: duration === null || duration === void 0 ? void 0 : duration.exit, easing: 'ease-out' });
                    break;
                }
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        if (window.ResizeObserver && !resizeObserver) {
            resizeObserver = new window.ResizeObserver(() => draw());
            resizeObserver.observe(canvas);
        }
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            transitionControl === null || transitionControl === void 0 ? void 0 : transitionControl.cancel();
            resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-gridlines', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            opacity: 0,
            ...style
        } }));
};
exports.GridLines = GridLines;


/***/ }),

/***/ "./src/GridLines/GridLines.types.ts":
/*!******************************************!*\
  !*** ./src/GridLines/GridLines.types.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
;


/***/ }),

/***/ "./src/GridLines/index.ts":
/*!********************************!*\
  !*** ./src/GridLines/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridLines = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const GridLines_1 = __webpack_require__(/*! ./GridLines */ "./src/GridLines/GridLines.tsx");
const GridLines = (0, react_tools_1.memo)(GridLines_1.GridLines);
exports.GridLines = GridLines;
tslib_1.__exportStar(__webpack_require__(/*! ./GridLines.types */ "./src/GridLines/GridLines.types.ts"), exports);


/***/ }),

/***/ "./src/MovingLines/MovingLines.tsx":
/*!*****************************************!*\
  !*** ./src/MovingLines/MovingLines.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MovingLines = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_1 = tslib_1.__importStar(__webpack_require__(/*! react */ "../../scripts/pkg-build-umd-mocks/react.js"));
const motion_1 = __webpack_require__(/*! motion */ "../../scripts/pkg-build-umd-mocks/motion.js");
const tools_1 = __webpack_require__(/*! @arwes/tools */ "../../scripts/pkg-build-umd-mocks/arwes/tools.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const animated_1 = __webpack_require__(/*! @arwes/animated */ "../../scripts/pkg-build-umd-mocks/arwes/animated.js");
const animator_1 = __webpack_require__(/*! @arwes/animator */ "../../scripts/pkg-build-umd-mocks/arwes/animator.js");
const react_animator_1 = __webpack_require__(/*! @arwes/react-animator */ "../../scripts/pkg-build-umd-mocks/arwes/react-animator.js");
const { entering, exiting, exited } = animator_1.ANIMATOR_STATES;
const random = (min, max) => (max - min) * Math.random();
const minmaxOverflow01 = (value) => Math.min(1, Math.max(0, value === 1 ? 1 : value % 1));
// Create a list of lines in the given available canvas axis size.
// The lines are placed at random positions in the grid.
const createLinesSet = (config) => {
    const { distance, positionsLength, margin, size } = config;
    const linesLength = Math.floor(random(0.1, 0.5) * positionsLength);
    const positions = Array(positionsLength).fill(0).map((_, i) => i);
    const positionsRandom = (0, tools_1.randomizeList)(positions);
    const positionsSelected = positionsRandom.slice(0, linesLength);
    return positionsSelected.map(position => {
        const axis1 = (margin / 2) + (position * distance);
        const axis2Initial = Math.random() * (size / 2);
        const length = Math.floor(random(0.1, 0.5) * size);
        return { axis1, axis2Initial, length };
    });
};
const defaultProps = {
    lineWidth: 1,
    lineColor: '#777',
    distance: 30,
    sets: 5
};
const MovingLines = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        const canvas = elementRef.current;
        const ctx = canvas.getContext('2d');
        let transitionControl;
        let intervalControl;
        let linesSets = [];
        const draw = (intervalProgress) => {
            const { lineWidth, lineColor, distance, sets: linesSetsLength } = propsFullRef.current;
            const width = canvas.clientWidth;
            const height = canvas.clientHeight;
            const isResized = canvas.width !== width || canvas.height !== height;
            const axis1Size = width;
            const axis2Size = height;
            const positionsLength = 1 + Math.floor(axis1Size / distance);
            const margin = axis1Size % distance;
            canvas.width = width;
            canvas.height = height;
            ctx.clearRect(0, 0, width, height);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = lineColor;
            ctx.shadowBlur = lineWidth;
            ctx.shadowOffsetX = 0;
            ctx.shadowOffsetY = 0;
            ctx.shadowColor = lineColor;
            if (linesSets.length === 0 || isResized) {
                linesSets = Array(linesSetsLength).fill(null).map(() => createLinesSet({ positionsLength, margin, distance, size: axis2Size }));
            }
            linesSets.forEach((linesSet, linesSetIndex) => {
                // "intervalProgress" goes from 0 to 1 repeatedly indicating each interval.
                // Every set of lines will have an progress offset so the its animation
                // starts/ends at different times than each other.
                // Since those sets will start later in time, they will end faster, so
                // when they do, they extra progress offset will start from the beginning.
                // So if one set ends at 1.23 in the animation progress, it overflows
                // and becomes 0.23.
                const linesSetProgressOffset = ((1 / linesSetsLength) * linesSetIndex);
                const progress = minmaxOverflow01(intervalProgress + linesSetProgressOffset);
                const progressEase = animated_1.easing.inOutCubic(progress);
                linesSet.forEach(line => {
                    const { axis1, axis2Initial, length } = line;
                    // Move the line from before to after the visible space.
                    const axis2Move = ((axis2Size * 2) * progressEase) - axis2Size;
                    ctx.beginPath();
                    ctx.moveTo(axis1, axis2Size - (axis2Initial + axis2Move));
                    ctx.lineTo(axis1, axis2Size - (axis2Initial + length + axis2Move));
                    ctx.stroke();
                    ctx.closePath();
                });
            });
        };
        const animatorSubscription = (node) => {
            const state = node.state;
            const { duration } = node.control.getSettings();
            switch (state) {
                case entering: {
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [0, 1] }, { duration: duration.enter, easing: 'ease-out' });
                    intervalControl = (0, motion_1.animate)(draw, { duration: duration.interval || 10, easing: 'linear', repeat: Infinity });
                    break;
                }
                case exiting: {
                    transitionControl = (0, motion_1.animate)(canvas, { opacity: [1, 0] }, { duration: duration.exit, easing: 'ease-out' });
                    break;
                }
                case exited: {
                    intervalControl === null || intervalControl === void 0 ? void 0 : intervalControl.cancel();
                    break;
                }
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            transitionControl === null || transitionControl === void 0 ? void 0 : transitionControl.cancel();
            intervalControl === null || intervalControl === void 0 ? void 0 : intervalControl.cancel();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-movinglines', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            opacity: 0,
            ...style
        } }));
};
exports.MovingLines = MovingLines;


/***/ }),

/***/ "./src/MovingLines/MovingLines.types.ts":
/*!**********************************************!*\
  !*** ./src/MovingLines/MovingLines.types.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
;


/***/ }),

/***/ "./src/MovingLines/index.ts":
/*!**********************************!*\
  !*** ./src/MovingLines/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MovingLines = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const MovingLines_1 = __webpack_require__(/*! ./MovingLines */ "./src/MovingLines/MovingLines.tsx");
const MovingLines = (0, react_tools_1.memo)(MovingLines_1.MovingLines);
exports.MovingLines = MovingLines;
tslib_1.__exportStar(__webpack_require__(/*! ./MovingLines.types */ "./src/MovingLines/MovingLines.types.ts"), exports);


/***/ }),

/***/ "./src/Puffs/Puffs.tsx":
/*!*****************************!*\
  !*** ./src/Puffs/Puffs.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Puffs = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_1 = tslib_1.__importStar(__webpack_require__(/*! react */ "../../scripts/pkg-build-umd-mocks/react.js"));
const motion_1 = __webpack_require__(/*! motion */ "../../scripts/pkg-build-umd-mocks/motion.js");
const tools_1 = __webpack_require__(/*! @arwes/tools */ "../../scripts/pkg-build-umd-mocks/arwes/tools.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const animated_1 = __webpack_require__(/*! @arwes/animated */ "../../scripts/pkg-build-umd-mocks/arwes/animated.js");
const animator_1 = __webpack_require__(/*! @arwes/animator */ "../../scripts/pkg-build-umd-mocks/arwes/animator.js");
const react_animator_1 = __webpack_require__(/*! @arwes/react-animator */ "../../scripts/pkg-build-umd-mocks/arwes/react-animator.js");
const { entering, entered, exiting, exited } = animator_1.ANIMATOR_STATES;
const minmaxOverflow01 = (value) => Math.min(1, Math.max(0, value === 1 ? 1 : value % 1));
const defaultProps = {
    padding: 50,
    xOffset: [0, 0],
    yOffset: [-10, -100],
    radiusInitial: 4,
    radiusOffset: [4, 40],
    sets: 5
};
const Puffs = (props) => {
    const propsFull = { ...defaultProps, ...props };
    const { elementRef: elementRefExternal, className, style } = propsFull;
    const animator = (0, react_animator_1.useAnimator)();
    const elementRef = (0, react_1.useRef)(null);
    const propsFullRef = (0, react_1.useRef)(propsFull);
    propsFullRef.current = propsFull;
    (0, react_1.useEffect)(() => {
        if (!animator) {
            return;
        }
        const canvas = elementRef.current;
        const ctx = canvas.getContext('2d');
        let canvasControl;
        let puffsControl;
        let puffsEmptyTimeoutId;
        const cancelAnimationSubscriptions = () => {
            canvasControl === null || canvasControl === void 0 ? void 0 : canvasControl.cancel();
            puffsControl === null || puffsControl === void 0 ? void 0 : puffsControl.cancel();
            window.clearTimeout(puffsEmptyTimeoutId);
        };
        const animatorSubscription = (node) => {
            const state = node.state;
            const { duration } = node.control.getSettings();
            switch (state) {
                case entering: {
                    cancelAnimationSubscriptions();
                    const { color, quantity, padding, xOffset, yOffset, radiusInitial, radiusOffset, sets } = propsFullRef.current;
                    const puffsSetQuantity = Math.round(quantity / sets);
                    const puffsSetOffset = 1 / sets;
                    const createPuff = (width, height) => {
                        const x = padding + (Math.random() * (width - (padding * 2)));
                        const y = padding + (Math.random() * (height - (padding * 2)));
                        const r = radiusInitial;
                        const xo = xOffset[0] + (Math.random() * xOffset[1]);
                        const yo = yOffset[0] + (Math.random() * yOffset[1]);
                        const ro = radiusOffset[0] + (Math.random() * radiusOffset[1]);
                        return { x, y, r, xo, yo, ro };
                    };
                    const createPuffsSets = (width, height) => {
                        return Array(sets)
                            .fill(null)
                            .map(() => Array(puffsSetQuantity)
                            .fill(null)
                            .map(() => createPuff(width, height)));
                    };
                    const drawPuffs = (puffs, progress) => {
                        // From: 0 at 0%, 1 at 50%, 0 at 100%.
                        ctx.globalAlpha = progress <= 0.5
                            ? progress * 2
                            : -2 * progress + 2;
                        puffs.forEach(puff => {
                            const x = puff.x + (progress * puff.xo);
                            const y = puff.y + (progress * puff.yo);
                            const r = puff.r + (progress * puff.ro);
                            const grd = ctx.createRadialGradient(x, y, 0, x, y, r);
                            grd.addColorStop(0, color);
                            grd.addColorStop(1, 'transparent');
                            ctx.beginPath();
                            ctx.fillStyle = grd;
                            ctx.arc(x, y, r, 0, 2 * Math.PI);
                            ctx.fill();
                            ctx.closePath();
                        });
                    };
                    let puffsSets = [];
                    const draw = (intervalProgress) => {
                        const width = canvas.clientWidth;
                        const height = canvas.clientHeight;
                        const isResized = canvas.width !== width || canvas.height !== height;
                        if (isResized || !puffsSets.length) {
                            puffsSets = createPuffsSets(width, height);
                        }
                        canvas.width = width;
                        canvas.height = height;
                        ctx.clearRect(0, 0, width, height);
                        puffsSets.forEach((puffs, index) => {
                            const puffsOffset = puffsSetOffset * index;
                            const puffsProgress = minmaxOverflow01(intervalProgress + puffsOffset);
                            drawPuffs(puffs, animated_1.easing.outSine(puffsProgress));
                        });
                    };
                    canvasControl = (0, motion_1.animate)(canvas, { opacity: [0, 1] }, { duration: duration === null || duration === void 0 ? void 0 : duration.enter });
                    const runPuffsAnimation = () => {
                        puffsControl = (0, motion_1.animate)((progress) => {
                            draw(progress);
                            if (progress >= 1) {
                                const emptyDuration = ((duration === null || duration === void 0 ? void 0 : duration.intervalPause) || 0) * 1000;
                                window.clearTimeout(puffsEmptyTimeoutId);
                                window.setTimeout(runPuffsAnimation, emptyDuration);
                            }
                        }, { duration: duration === null || duration === void 0 ? void 0 : duration.interval, easing: 'linear' });
                    };
                    runPuffsAnimation();
                    break;
                }
                case entered: {
                    break;
                }
                case exiting: {
                    canvasControl === null || canvasControl === void 0 ? void 0 : canvasControl.cancel();
                    canvasControl = (0, motion_1.animate)(canvas, { opacity: [1, 0] }, { duration: duration === null || duration === void 0 ? void 0 : duration.exit });
                    break;
                }
                case exited: {
                    cancelAnimationSubscriptions();
                    canvas.style.opacity = '0';
                    break;
                }
            }
        };
        animator.node.subscribers.add(animatorSubscription);
        return () => {
            animator.node.subscribers.delete(animatorSubscription);
            cancelAnimationSubscriptions();
        };
    }, [animator]);
    return (react_1.default.createElement("canvas", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(elementRef, elementRefExternal), className: (0, tools_1.cx)('arwes-react-bgs-puffs', className), style: {
            position: 'absolute',
            left: 0,
            top: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            ...style
        } }));
};
exports.Puffs = Puffs;


/***/ }),

/***/ "./src/Puffs/Puffs.types.ts":
/*!**********************************!*\
  !*** ./src/Puffs/Puffs.types.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
;


/***/ }),

/***/ "./src/Puffs/index.ts":
/*!****************************!*\
  !*** ./src/Puffs/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Puffs = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
const react_tools_1 = __webpack_require__(/*! @arwes/react-tools */ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js");
const Puffs_1 = __webpack_require__(/*! ./Puffs */ "./src/Puffs/Puffs.tsx");
const Puffs = (0, react_tools_1.memo)(Puffs_1.Puffs);
exports.Puffs = Puffs;
tslib_1.__exportStar(__webpack_require__(/*! ./Puffs.types */ "./src/Puffs/Puffs.types.ts"), exports);


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./Dots/index */ "./src/Dots/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Puffs/index */ "./src/Puffs/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./GridLines/index */ "./src/GridLines/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./MovingLines/index */ "./src/MovingLines/index.ts"), exports);


/***/ }),

/***/ "../../node_modules/tslib/tslib.es6.js":
/*!*********************************************!*\
  !*** ../../node_modules/tslib/tslib.es6.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldIn": () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__esDecorate": () => (/* binding */ __esDecorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__propKey": () => (/* binding */ __propKey),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__runInitializers": () => (/* binding */ __runInitializers),
/* harmony export */   "__setFunctionName": () => (/* binding */ __setFunctionName),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};

function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};

function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/arwes/animated.js":
/*!***********************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/arwes/animated.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = window.arwes.animated;


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/arwes/animator.js":
/*!***********************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/arwes/animator.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = window.arwes.animator;


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/arwes/react-animator.js":
/*!*****************************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/arwes/react-animator.js ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = window.arwes['react-animator'];


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/arwes/react-tools.js":
/*!**************************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/arwes/react-tools.js ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = window.arwes['react-tools'];


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/arwes/tools.js":
/*!********************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/arwes/tools.js ***!
  \********************************************************/
/***/ ((module) => {

module.exports = window.arwes.tools;


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/motion.js":
/*!***************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/motion.js ***!
  \***************************************************/
/***/ ((module) => {

module.exports = window.motion;


/***/ }),

/***/ "../../scripts/pkg-build-umd-mocks/react.js":
/*!**************************************************!*\
  !*** ../../scripts/pkg-build-umd-mocks/react.js ***!
  \**************************************************/
/***/ ((module) => {

module.exports = window.React;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});