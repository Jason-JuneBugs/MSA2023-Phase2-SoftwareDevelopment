import { useRef } from 'react';
import React, { useId, useEffect } from 'react';
import { useAnimator } from '@arwes/react-animator';
import { useBleeps } from '@arwes/react-bleeps';
const BleepsOnAnimator = (props) => {
    const { id: externalId, transitions, continuous } = props;
    const internalId = useId();
    const transitionsRef = useRef(transitions);
    const animator = useAnimator();
    const bleeps = useBleeps();
    // To prevent multiple executions of the useEffect to check for Animator node updates.
    transitionsRef.current = transitions;
    const id = externalId || internalId;
    useEffect(() => {
        if (!animator) {
            return;
        }
        let currentBleep = null;
        const cancelSubscription = animator.node.subscribe(node => {
            const bleepName = transitionsRef.current[node.state];
            if (!continuous) {
                currentBleep === null || currentBleep === void 0 ? void 0 : currentBleep.stop(id);
            }
            const newBleep = bleeps[bleepName];
            if (newBleep) {
                currentBleep === null || currentBleep === void 0 ? void 0 : currentBleep.stop(id);
                currentBleep = newBleep;
                currentBleep.play(id);
            }
        });
        return () => {
            cancelSubscription();
            currentBleep === null || currentBleep === void 0 ? void 0 : currentBleep.stop(id);
        };
    }, [id, animator, bleeps]);
    return React.createElement(React.Fragment, null);
};
export { BleepsOnAnimator };
