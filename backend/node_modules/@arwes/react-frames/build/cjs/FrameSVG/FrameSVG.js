"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameSVG = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const tools_1 = require("@arwes/tools");
const react_tools_1 = require("@arwes/react-tools");
const frames_1 = require("@arwes/frames");
const index_1 = require("../useFrameSVGRenderer/index");
const FrameSVG = (props) => {
    const { paths, onRender: onRenderExternal, className, style, elementRef, children, ...otherProps } = props;
    const svgRef = (0, react_1.useRef)(null);
    const onRender = (0, react_1.useCallback)((svg, width, height) => {
        if (paths) {
            (0, frames_1.renderFrameSVGPaths)(svg, width, height, paths);
        }
        onRenderExternal === null || onRenderExternal === void 0 ? void 0 : onRenderExternal(svg, width, height);
    }, [paths]);
    (0, index_1.useFrameSVGRenderer)(svgRef, onRender);
    return (react_1.default.createElement("svg", { role: 'presentation', ref: (0, react_tools_1.mergeRefs)(svgRef, elementRef), className: (0, tools_1.cx)('arwes-react-frames-framesvg', className), xmlns: 'http://www.w3.org/2000/svg', 
        // Even if it is still resized automatically, in case there is a delay
        // or the ResizeObserver API is not available, the SVG should be resized.
        preserveAspectRatio: 'none', style: {
            position: 'absolute',
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            ...style
        }, ...otherProps }, children));
};
exports.FrameSVG = FrameSVG;
