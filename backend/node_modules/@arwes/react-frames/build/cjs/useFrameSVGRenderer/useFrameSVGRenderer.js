"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFrameSVGRenderer = void 0;
const react_1 = require("react");
const useFrameSVGRenderer = (svgRef, onRenderExternal) => {
    (0, react_1.useEffect)(() => {
        if (!svgRef.current) {
            return;
        }
        const svg = svgRef.current;
        const onRender = () => {
            const { width, height } = svg.getBoundingClientRect();
            svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
            onRenderExternal === null || onRenderExternal === void 0 ? void 0 : onRenderExternal(svg, width, height);
        };
        // Resize only once initially and synchronously.
        onRender();
        // If ResizeObserver is available, allow rerenders on element resize.
        if (window.ResizeObserver) {
            let isFirstRender = true;
            const observer = new window.ResizeObserver(() => {
                // The observer triggers and initial observation call asynchronously,
                // but the first render was already executed before, so skip it.
                if (isFirstRender) {
                    isFirstRender = false;
                    return;
                }
                onRender();
            });
            observer.observe(svg);
            return () => observer.disconnect();
        }
    }, [onRenderExternal]);
};
exports.useFrameSVGRenderer = useFrameSVGRenderer;
