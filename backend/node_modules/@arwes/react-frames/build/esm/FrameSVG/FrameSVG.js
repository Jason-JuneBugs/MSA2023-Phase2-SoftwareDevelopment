import React, { useRef, useCallback } from 'react';
import { cx } from '@arwes/tools';
import { mergeRefs } from '@arwes/react-tools';
import { renderFrameSVGPaths } from '@arwes/frames';
import { useFrameSVGRenderer } from "../useFrameSVGRenderer/index.js";
const FrameSVG = (props) => {
    const { paths, onRender: onRenderExternal, className, style, elementRef, children, ...otherProps } = props;
    const svgRef = useRef(null);
    const onRender = useCallback((svg, width, height) => {
        if (paths) {
            renderFrameSVGPaths(svg, width, height, paths);
        }
        onRenderExternal === null || onRenderExternal === void 0 ? void 0 : onRenderExternal(svg, width, height);
    }, [paths]);
    useFrameSVGRenderer(svgRef, onRender);
    return (React.createElement("svg", { role: 'presentation', ref: mergeRefs(svgRef, elementRef), className: cx('arwes-react-frames-framesvg', className), xmlns: 'http://www.w3.org/2000/svg', 
        // Even if it is still resized automatically, in case there is a delay
        // or the ResizeObserver API is not available, the SVG should be resized.
        preserveAspectRatio: 'none', style: {
            position: 'absolute',
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            display: 'block',
            border: 0,
            margin: 0,
            padding: 0,
            width: '100%',
            height: '100%',
            ...style
        }, ...otherProps }, children));
};
export { FrameSVG };
