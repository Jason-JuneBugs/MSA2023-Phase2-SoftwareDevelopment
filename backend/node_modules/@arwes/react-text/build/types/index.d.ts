declare module '@arwes/react-text/Text/Text' {
  import { type ReactNode, type ReactElement, type HTMLProps, type ForwardedRef } from 'react';
  import { type easing } from '@arwes/animated';
  import { type TextTransitionManager } from '@arwes/text';
  interface TextProps<E extends HTMLElement = HTMLSpanElement> extends HTMLProps<E> {
      as?: keyof HTMLElementTagNameMap;
      className?: string;
      contentClassName?: string;
      elementRef?: ForwardedRef<E>;
      manager?: TextTransitionManager;
      easing?: keyof typeof easing;
      /**
       * If the duration of the animation should be fixed by the parent Animator
       * or dynamic according to its children.
       */
      fixed?: boolean;
      hideOnExited?: boolean;
      hideOnEntered?: boolean;
      children: ReactNode;
  }
  const TEXT_CLASS = "arwes-react-text-text";
  const Text: <E extends HTMLElement = HTMLSpanElement>(props: TextProps<E>) => ReactElement;
  export type { TextProps };
  export { TEXT_CLASS, Text };

}
declare module '@arwes/react-text/Text/index' {
  /// <reference types="react" />
  const Text: <E extends HTMLElement = HTMLSpanElement>(props: import("@arwes/react-text/Text/Text").TextProps<E>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
  export * from '@arwes/react-text/Text/Text';
  export { Text };

}
declare module '@arwes/react-text/index' {
  export * from '@arwes/react-text/Text/index';

}

declare module '@arwes/react-text' {
  import main = require('@arwes/react-text/index');
  export = main;
}
